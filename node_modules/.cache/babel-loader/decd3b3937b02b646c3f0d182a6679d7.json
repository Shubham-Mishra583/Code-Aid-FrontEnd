{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\91935\\\\OneDrive\\\\Documents\\\\check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, CREATE_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  error: {},\n  loading: true\n};\nexport default ((state = initialState, action) => {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        post: null,\n        loading: false\n      });\n\n    case CREATE_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n\n    case ADD_COMMENT:\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: payload\n        }),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\91935\\OneDrive\\Documents\\check\\src\\reducers\\post.js"],"names":["GET_POSTS","CREATE_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","error","loading","state","action","type","payload","map","_id","id","likes","filter","comments"],"mappings":";AAAA,SACEA,SADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,cARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,OAAO,EAAE;AAJU,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAAA,QACvCC,IADuC,GACrBD,MADqB,CACvCC,IADuC;AAAA,QACjCC,OADiC,GACrBF,MADqB,CACjCE,OADiC;;AAE/C,UAAQD,IAAR;AACE,SAAKf,SAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,KAAK,EAAEO,OAFT;AAGEN,QAAAA,IAAI,EAAE,IAHR;AAIEE,QAAAA,OAAO,EAAE;AAJX;;AAMF,SAAKX,WAAL;AACE,+BACKY,KADL;AAEEJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFT;AAGEG,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,UAAL;AACE,+BACKW,KADL;AAEEF,QAAAA,KAAK,EAAEK,OAFT;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,YAAL;AACE,+BACKU,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBP,IAAI,IACzBA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACG,EAArB,qBAA+BT,IAA/B;AAAqCU,UAAAA,KAAK,EAAEJ,OAAO,CAACI;AAApD,aAA8DV,IADzD,CAFT;AAKEE,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKR,WAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYY,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFT;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,QAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,IAAI,EAAEM,OAFR;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,WAAL;AACA,SAAKC,cAAL;AACE,+BACKM,KADL;AAEEH,QAAAA,IAAI,oBAAOG,KAAK,CAACH,IAAb;AAAmBY,UAAAA,QAAQ,EAAEN;AAA7B,UAFN;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,aAAOC,KAAP;AAhDJ;AAkDD,CApDD","sourcesContent":["import {\n  GET_POSTS,\n  CREATE_POST,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  error: {},\n  loading: true,\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        post: null,\n        loading: false,\n      };\n    case CREATE_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false,\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false,\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false,\n      };\n    case ADD_COMMENT:\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}